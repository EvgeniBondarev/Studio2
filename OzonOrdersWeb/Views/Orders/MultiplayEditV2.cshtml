﻿﻿@using OzonOrdersWeb.ViewModels.OrderViewModels


@model MultiplayEditOrderViewModel

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*
<script asp-src-include="~/js/**/*.js"></script> *@
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script asp-src-include="~/js/**/*.js"></script>
<link rel="stylesheet" href="~/css/table.css" />
<h4>Изменить заказы</h4>

@if (Model.ErrorMessage != null)
{
    <div class="alert alert-dismissible alert-danger">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <p>@Html.Raw(Model.ErrorMessage)</p>
    </div>
}

<hr />
<div class="form-row d-flex">
    <div class="form-group col-sm-3" style="display: none;">
        <label for="universalField" class="col-form-label">Цена закупки:</label>
        <input type="text" class="form-control" id="universalField" />
    </div>
</div>

<style>

    /*
            #shipmentTable td {
                padding: 5px 2px; /* вертикальный  горизонтальный
            }

            #shipmentTable th {
                padding: 5px 2px; /* вертикальный  горизонтальный
            }

            */

    th {
        white-space: nowrap;
    }

    .container .row .col-md-4 {
        flex: 0 0 auto;
        max-width: 33.3333%;
    }

    .container .custom-width-large {
        width: 400px; /* Устанавливаем фиксированную ширину для поля "Наименование товара" */
    }


    .custom-white {
        background-color: #fff;
    }

    .custom-gray {
        background-color: #585858;
        color: #fff;
    }

        .custom-gray:hover {
            color: #fff;
        }

    .custom-red {
        background-color: #DC143C;
        color: #fff;
    }

        .custom-red:hover {
            color: #fff;
        }

    .product-popup {
        display: none;
        position: absolute;
        z-index: 1;
    }

    .product-cell {
        font-size: 11px;
    }

        .product-cell:hover .product-popup {
            display: block;
        }

    #processingDateFilter,
    #shippingDateFilter {
        width: 70px;
    }

    #deliveryPeriodInput,
    #timeLeftDayInput {
        width: 50px;
    }

    #statusFilter,
    #appStatusFilterInput,
    #supplierFilter {
        width: 103px;
    }

    #ozonClientFilterInput,
    #deliveryCityFilter{
        width: 125px;
    }

    #currentPriceWithDiscountFilter,
    #quantityFilter,
    #priceFilter,
    #shipmentAmountFilter,
    #purchasePriceFilter,
    #costPriceFilter,
    #ozonCommissionFilter,
    #profitFilter,
    #discountFilter {
        width: 70px;
        max-width: 70px;
    }

    a {
        text-decoration: none;
    }

    .horizontal-line {
        border-top: 1px solid #ccc;
        margin: 20px 0;
    }

    #infoWindow {
        position: fixed;
        display: none;
        border: 1px solid #ccc;
        background-color: #fff;
        padding: 10px;
        z-index: 9999;
    }

    th.active {
        background-color: #f4f4f4; /* Цвет подсветки */
    }

    .button-container {
        display: flex;
        gap: 10px; /* Расстояние между кнопками */
    }

    .horizontal-inputs {
        display: flex;
        align-items: center;
    }

        .horizontal-inputs > div {
            margin-right: 10px; /* Отступ между элементами */
        }

    .vertical-align {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        height: 100%;
    }

        .vertical-align > * {
            margin: 2px 0; /* Минимальный отступ между элементами */
        }

    .checkbox-column {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 10px;
    }

    .nowrap {
        white-space: nowrap;
    }

    .product-cell {
        /* Убедитесь, что ширина элемента установлена */
        width: 100%; /* Или установите конкретную ширину, если нужно */
        /* Обрезка текста и добавление многоточия */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Изначально скрываем кнопку */
    .clear-btn {
        display: none;
        position: absolute;
        left: 100%;
        transform: translateX(0) translateY(-50%); /* Прижимаем к основной кнопке и центрируем по вертикали */
        z-index: 10; /* Поверх других элементов */
        top: 50%; /* Центрируем по вертикали относительно главной кнопки */
        opacity: 0; /* Прозрачность кнопки */
        border: solid 1px;
    }

        /* Показываем кнопку при наведении на основную или на саму кнопку очистки */
        .btn-container:hover .clear-btn,
        .clear-btn:hover {
            display: block;
            opacity: 1; /* Увеличиваем непрозрачность при наведении */
            border: solid 1px;
        }

    /* Обёртка для кнопок */
    .btn-container {
        position: relative;
        display: inline-block;
    }

    .link-option {
        color: blue;
        text-decoration: underline;
        cursor: pointer;
    }

    .highlight-error {
        border: 3px solid rgba(220, 53, 69, 0.5);
        ;
    }

    .highlight-warning {
        border: 3px solid rgba(255, 255, 0, 0.5);
    }

    .bg-green-300 {
        background-color: #d4edda !important; /* Bootstrap's 'bg-success' color */
    }

    .form-check-label {
        user-select: none; /* предотвращает выделение текста */
        cursor: pointer; /* меняет курсор при наведении */
    }

    .highlight-error {
        border: 3px solid rgba(220, 53, 69, 0.5); /* Красный цвет для ошибки */
    }

    .highlight-null {
        border: 3px solid rgba(128, 128, 128, 0.5); /* Серый цвет для ошибки */
    }

    .highlight-success {
        border: 3px solid rgba(40, 167, 69, 0.5); /* Зеленый цвет для успешного статуса */
    }
</style>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Выберите столбцы для отображения</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body-checkbox">
                <div class="container mt-3">
                    <div class="form-group">
                        <div class="form-row">
                            <button type="button" class="btn btn-danger" onclick="clearSelectedIdsCookie()">Очистить выбранные поля для изменения</button>
                            <br />
                            <br />
                            @{
                                int checkboxCounter = 1;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Номер заказа</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Клиент"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Клиент</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Принят в обработку"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Принят в обработку</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Дата отгрузки"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Дата отгрузки</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Срок доставки"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Срок доставки</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус клиента"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Статус клиента</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Статус</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наименование товара"))
                            {
                                <div class="form-group col-md-7">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Наименование товара</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Артикул"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Артикул</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Производитель"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Производитель</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Склад отгрузки"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Склад отгрузки</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Поставщик"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Поставщик</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа поставщику"))
                            {
                                <div class="form-group col-md-6">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Номер заказа поставщику</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена сайта"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Цена сайта</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Цена</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Количество"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Кол.</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Сумма отправления"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Сумма отправления</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Категория"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Категория</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Объемный вес"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Объемный вес</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена закупки"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Цена закупки</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Комиссия ОЗОН"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Комиссия Ozon</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Прибыль"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Прибыль</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наценка %"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Наценка %</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Себестоимость"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Себестоимость</label>
                                </div>
                                checkboxCounter++;
                            }
                            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Город доставки"))
                            {
                                <div class="form-group col-md-5">
                                    <input type="checkbox" class="form-check-input" id="chk@(checkboxCounter)" checked>
                                    <label class="form-check-label" for="chk@(checkboxCounter)">Город доставки</label>
                                </div>
                                checkboxCounter++;
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between align-items-center">
    <div class="flex-grow-1"></div> <!-- Пустой div для заполнения пространства -->
    <button type="button" class="btn btn-link" data-bs-toggle="modal" data-bs-target="#exampleModal" style="width: 18px; height: 18px; outline: none; box-shadow: none;" title="Настройка отображения таблицы">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16">
            <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z" />
        </svg>
        <span class="visually-hidden">Button</span>
    </button>
</div>



<form asp-action="MultiplayEditV2">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="RedirectPage" />

    <table class="table table-striped" id="shipmentTable">
        <thead>
            <tr>
                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа"))
                {
                    <th id="thShipmentNumber">
                        <small>№/Номер заказа &nbsp;</small>
                        <input id="shipmentNumberFilter" class="form-control form-control-sm" readonly />
                    </th>
                }
                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Клиент"))
                    {
                        <div id="thOzonClient">
                            <small>Клиент &nbsp; </small>
                            <input id="ozonClientFilterInput" class="form-control form-control-sm" autocomplete="off" readonly />
                        </div>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Город доставки"))
                    {
                        <div id="thDeliveryCity" class="text-muted" title="Город доставки">
                            <small>Город. &nbsp;</small>
                            <input id="deliveryCityFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                </th>
                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Принят в обработку"))
                    {
                        <div id="thProcessingDate" title="Принят в обработку">
                            <small>Принят.  &nbsp;</small>
                            <input id="processingDateFilter" class="form-control form-control-sm" type="date" readonly />
                        </div>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Дата отгрузки"))
                    {
                        <div id="thShippingDate" class="text-muted" title="Дата отгрузки">
                            <small>Дата отгр.  &nbsp;</small>
                            <input id="shippingDateFilter" class="form-control form-control-sm" type="date" readonly />
                        </div>
                    }
                </th>

                <th style="width: 20px">
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Срок доставки"))
                    {
                        <div id="thDeliveryPeriod" title="Срок доставки">
                            <small>Срок.  &nbsp;</small>
                            <input id="deliveryPeriodInput" class="form-control form-control-sm" type="text" placeholder="1 д. 1 ч." readonly />
                        </div>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Срок доставки"))
                    {
                        <div id="thDeliveryPeriod" class="text-muted" title="Осталось времени">
                            <small>Остал.  &nbsp;</small>
                            <input id="timeLeftDayInput" class="form-control form-control-sm" type="number" placeholder="1 д." readonly />
                        </div>
                    }
                </th>
                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус клиента"))
                    {
                        <div id="thStatusOzon">
                            <small>Статус клиента  &nbsp;</small>
                            <input id="statusFilter" class="form-control form-control-sm statusFilter" autocomplete="off" readonly />
                        </div>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус"))
                    {
                        <div id="thStatus" class="text-muted">
                            <div id="thStatus" class="text-muted">
                                <small>Статус  &nbsp;</small>
                                <select class="form-control form-control-sm" id="statusSelect" onchange="handleStatusSelectChange(this)" style="width: 103px; max-width: 103px;">
                                    <option value="">Выберите значение</option>
                                    @foreach (var statuses in ViewBag.AppStatuses)
                                    {
                                        <option value="@statuses.Value">@statuses.Text</option>
                                    }
                                    <option value="create" class="link-option">Создать статус</option>
                                </select>
                            </div>

                            <script>
                                function handleStatusSelectChange(selectElement) {
                                    if (selectElement.value === "create") {
                                        window.location.href = '@Url.Action("Create", "AppStatus")';
                                    } else {
                                        var selectedStatus = selectElement.value;
                                        document.querySelectorAll('.status-select').forEach(function (statusSelect) {
                                            statusSelect.value = selectedStatus;
                                            checkField(statusSelect);  // Изменяем раскраску для каждого элемента
                                        });
                                    }
                                }

                                function checkField(select) {
                                    const selectedText = select.options[select.selectedIndex].text.trim();

                                    // Снимаем все возможные классы
                                    select.classList.remove('highlight-null', 'highlight-success');

                                    // Добавляем соответствующий класс на основе выбранного статуса
                                    if (selectedText === "Заказан поставщику") {
                                        select.classList.add('highlight-success');
                                    } else if (selectedText === "Отменен") {
                                        select.classList.add('highlight-null');
                                    }
                                }

                                document.addEventListener('DOMContentLoaded', (event) => {
                                    // Выбираем все элементы select с классом 'status-select'
                                    const statusSelects = document.querySelectorAll('.status-select');

                                    // Добавляем обработчик изменения для каждого select
                                    statusSelects.forEach(select => {
                                        select.addEventListener('change', function () {
                                            checkField(this);
                                        });

                                        // Изначально проверяем состояние при загрузке страницы
                                        checkField(select);
                                    });
                                });
                            </script>
                        </div>
                    }
                </th>

                <th>
                    <div class="container">
                        <div class="row mb-0 justify-content-between">
                            <div id="thArticle" class="col-md-4 d-flex flex-column">
                                <small>Key &nbsp;</small>
                                <input id="articleFilter" class="form-control form-control-sm" readonly />
                            </div>
                            <div id="thManufacturer" class="col-md-4 d-flex flex-column">
                                <small>Производитель &nbsp;</small>
                                <input id="manufacturerFilter" class="form-control form-control-sm" readonly />
                            </div>
                            <div id="thArticle2" class="col-md-4 d-flex flex-column">
                                <small>Код товара  &nbsp;</small>
                                <input id="articleFilter2" class="form-control form-control-sm" readonly />
                            </div>
                        </div>
                        <div class="row mt-0">
                            <div id="thProductName" class="custom-width-large text-muted">
                                <small>Наименование товара &nbsp;</small>
                                <input id="productNameFilter" class="form-control form-control-sm" readonly />
                            </div>
                        </div>
                    </div>
                </th>

                <th>

                </th>

                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Склад отгрузки"))
                    {
                        <div id="thShipmentWarehouse">
                            <small>Склад отгрузки &nbsp;</small>
                            <input id="shipmentWarehouseFilter" class="form-control form-control-sm" autocomplete="off" readonly />
                        </div>
                    }
                </th>
                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Поставщик"))
                    {
                        <div id="thSupplier">
                            <small>Поставщик &nbsp;</small>
                            <select class="form-control form-control-sm universalSelect" id="universalSelect" onchange="handleSelectChange(this)">
                                <option value="">Выберите значение</option>
                                @foreach (var supplier in Model.Suppliers)
                                {
                                    int maxNameLength = Model.Suppliers.Max(s => s.Name.Length);
                                    int spacesToAdd = maxNameLength - supplier.Name.Length + 3;
                                    string spaces = new string(' ', spacesToAdd).Replace(" ", "&nbsp;");

                                    <option value="@supplier.Id" data-currency-code="@supplier.CurrencyCode" data-cost-factor="@supplier.CostFactor">
                                        @supplier.Name @Html.Raw(spaces) @supplier.CurrencyCode
                                    </option>
                                }

                                <option value="create" class="link-option" data-url="@Url.Action("Create", "Supplier")">Создать поставщика</option>
                            </select>
                        </div>

                        <script>
                            function handleSelectChange(selectElement) {
                                if (selectElement.value === "create") {
                                    window.location.href = '@Url.Action("Create", "Supplier")';
                                } else {
                                    var selectedOption = selectElement.options[selectElement.selectedIndex];
                                    var supplierId = selectedOption.value;
                                    var currencyCode = selectedOption.getAttribute('data-currency-code');
                                    var costFactor = selectedOption.getAttribute('data-cost-factor');

                                    document.querySelectorAll('.supplier-select').forEach(function (supplierSelect) {
                                        supplierSelect.value = supplierId;
                                        supplierSelect.dispatchEvent(new Event('change'));
                                    });

                                    document.querySelectorAll('.supplier-select').forEach(function (supplierSelect) {
                                        var relatedCurrencyCodeSpan = supplierSelect.closest('td').querySelector('.currency-code');
                                        if (relatedCurrencyCodeSpan) {
                                            relatedCurrencyCodeSpan.textContent = currencyCode;
                                        }
                                    });
                                }
                            }
                        </script>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа поставщику"))
                    {
                        <div id="thOrderNumberToSupplierSort" class="text-muted" title="Номер заказа поставщику">
                            <small>Номер зак. п. &nbsp;</small>
                            <input type="text" class="form-control form-control-sm universalOrderNumberToSupplie" id="universalOrderNumberToSupplier" />
                        </div>
                    }
                </th>
                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Категория"))
                    {
                        <div id="thCategory">
                            <small>Категория &nbsp;</small>
                            <input id="commercialCategoryFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Объемный вес"))
                    {
                        <div id="thVolume" class="text-muted">
                            <small>Вес V &nbsp;</small>
                            <input id="volumetricWeightFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                </th>
                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена сайта"))
                    {
                        <div id="thPurchasePrice" title="Цена сайта">
                            <small>Цена с. &nbsp;</small>
                            <input id="currentPriceWithDiscountFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Количество"))
                    {
                        <div id="thQuantity" class="text-muted" title="Количество">
                            <small>Кол. &nbsp;</small>
                            <input id="quantityFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                </th>
                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена"))
                    {
                        <div id="thPrice">
                            <small>Цена &nbsp;</small>
                            <input id="priceFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }

                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Сумма отправления"))
                    {
                        <div id="thShipmentAmount" class="text-muted" title="Сумма отправления">
                            <small>Сумма о. &nbsp;</small>
                            <input id="shipmentAmountFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                </th>

                <th>
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена закупки"))
                    {
                        <div id="thCurrentPrice" title="Цена закупки">
                            <small>Цена заку. &nbsp;</small>
                            <input id="purchasePriceFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Себестоимость"))
                    {
                        <div id="thCostPriceсе" class="text-muted" title="Себестоимость">
                            <small>Себест. &nbsp;</small>
                            <input id="costPriceFilter" class="form-control form-control-sm" readonly />
                        </div>
                    }
                </th>
                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Комиссия ОЗОН"))
                {
                    <th id="thOzonCommission" title="Комиссия ОЗОН">
                        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
                            <div>
                                <small>Комис. &nbsp;</small>
                            </div>
                            <div style="text-align: center; font-size: 10px;" class="text-muted">
                                <div><small>min</small></div>
                                <div><small>max</small></div>
                            </div>
                        </div>
                        <input id="ozonCommissionFilter" class="form-control form-control-sm" readonly />
                    </th>
                }
                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Прибыль"))
                {
                    <th id="thProfit" title="Прибыль">
                        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
                            <div>
                                <small>Приб. &nbsp;</small>
                            </div>
                            <div style="text-align: center; font-size: 10px;" class="text-muted">
                                <div><small>min</small></div>
                                <div><small>max</small></div>
                            </div>
                        </div>
                        <input id="profitFilter" class="form-control form-control-sm" readonly />
                    </th>
                }
                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наценка %"))
                {
                    <th id="thDiscount" title="Наценка %">
                        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
                            <div>
                                <small>Нацен.% &nbsp;</small>
                            </div>
                            <div style="text-align: center; font-size: 10px;" class="text-muted">
                                <div><small>min</small></div>
                                <div><small>max</small></div>
                            </div>
                        </div>
                        <input id="discountFilter" class="form-control form-control-sm" readonly />
                    </th>
                }
            </tr>

        </thead>
        <tbody>

            @for (int i = 0; i < Model.Orders.Count; i++)
            {
                <tr id="orderRow_@Model.Orders[i].Id">
                    <script>
                        $(document).ready(function () {
                            // Обработка удаления строки
                            $('.delete-order').on('click', function () {
                                var orderId = $(this).data('order-id');
                                $('#orderRow_' + orderId).remove();
                                updateRowNumbers();
                            });

                            // Обновление нумерации строк
                            function updateRowNumbers() {
                                $('#shipmentTable tbody tr').each(function (index) {
                                    $(this).find('.row-number').text(index + 1);
                                });
                            }
                            updateRowNumbers();
                        });
                    </script>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].Id" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].Id" class="form-control" />
                        <span asp-validation-for="Orders[i].Id" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].Key" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].Key" class="form-control" />
                        <span asp-validation-for="Orders[i].Key" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].ShipmentNumber" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].ShipmentNumber" class="form-control" />
                        <span asp-validation-for="Orders[i].ShipmentNumber" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].OzonClient" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].OzonClient" class="form-control" />
                        <span asp-validation-for="Orders[i].OzonClient" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].ProcessingDate" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].ProcessingDate" class="form-control" />
                        <span asp-validation-for="Orders[i].ProcessingDate" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].ShippingDate" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].ShippingDate" class="form-control" />
                        <span asp-validation-for="Orders[i].ShippingDate" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].Status" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].Status" class="form-control" />
                        <span asp-validation-for="Orders[i].Status" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].ProductName" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].ProductName" class="form-control" />
                        <span asp-validation-for="Orders[i].ProductName" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].ProductKey" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].ProductKey" class="form-control" />
                        <span asp-validation-for="Orders[i].ProductKey" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].Quantity" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].Quantity" class="form-control" />
                        <span asp-validation-for="Orders[i].Quantity" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].ShipmentAmount" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].ShipmentAmount" class="form-control" />
                        <span asp-validation-for="Orders[i].ShipmentAmount" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].Price" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].Price" class="form-control" />
                        <span asp-validation-for="Orders[i].Price" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].MinOzonCommission" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].MinOzonCommission" class="form-control" />
                        <span asp-validation-for="Orders[i].MinOzonCommission" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].MaxOzonCommission" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].MaxOzonCommission" class="form-control" />
                        <span asp-validation-for="Orders[i].MaxOzonCommission" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].MaxProfit" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].MaxProfit" class="form-control" />
                        <span asp-validation-for="Orders[i].MaxProfit" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].MinDiscount" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].MinDiscount" class="form-control" />
                        <span asp-validation-for="Orders[i].MinDiscount" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].DeliveryCity" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].DeliveryCity" class="form-control" />
                        <span asp-validation-for="Orders[i].DeliveryCity" class="text-danger"></span>
                    </div>

                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].UpdatedBy" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].UpdatedBy" class="form-control" value="@User.Identity.Name" />
                        <span asp-validation-for="Orders[i].UpdatedBy" class="text-danger"></span>
                    </div>

                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].TimeLeftDay" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].TimeLeftDay" class="form-control" value="@User.Identity.Name" />
                        <span asp-validation-for="Orders[i].TimeLeftDay" class="text-danger"></span>
                    </div>

                    <div class="form-group" style="display: none">
                        <label asp-for="Orders[i].FormattedTimeLeftDay" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                        <input asp-for="Orders[i].FormattedTimeLeftDay" class="form-control" value="@User.Identity.Name" />
                        <span asp-validation-for="Orders[i].FormattedTimeLeftDay" class="text-danger"></span>
                    </div>

                    <input type="hidden" asp-for="Orders[i].ProductInfoId" />
                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа"))
                    {
                        <td>
                            <div class="d-flex align-items-center">
                                <span class="ml-2">
                                    <b class="row-number"></b>
                                    <br />
                                    @Html.DisplayFor(modelItem => Model.Orders[i].ShipmentNumber)
                                    @if (Model.Orders[i].ShipmentNumber != null && Model.Orders[i].ShipmentNumber != "" && @Model.UniqueNumbers[Model.Orders[i].ShipmentNumber.Split('-')[0]] != 1)
                                    {
                                        <a href="#">(@Model.UniqueNumbers[Model.Orders[i].ShipmentNumber.Split('-')[0]])</a>
                                    }
                                </span>
                            </div>
                        </td>


                    }
                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Клиент"))
                        {
                            <div title="@Model.Orders[i].OzonClient">
                                @if (Model.Orders[i].OzonClient != null)
                                {
                                    string ozonClient = Model.Orders[i].OzonClient.Name;
                                    if (ozonClient.Length > 18)
                                    {
                                        ozonClient = ozonClient.Substring(0, 18) + "...";
                                    }
                                    @ozonClient
                                }
                            </div>
                        }
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Город доставки"))
                        {
                            @if (Model.Orders[i].DeliveryCity != null && Model.Orders[i].DeliveryCity != "")
                            {
                                <div class="text-muted d-flex align-items-center" style="white-space: nowrap;" title="@Model.Orders[i].DeliveryCity">
                                    @{
                                        string deliveryCity = Model.Orders[i].DeliveryCity;
                                        if (deliveryCity.Length > 11)
                                        {
                                            deliveryCity = deliveryCity.Substring(0, 11) + "...";
                                        }
                                        @deliveryCity
                                    }
                                    @if (Model.UniqueDeliveryCitys[Model.Orders[i].DeliveryCity] != 1)
                                    {
                                        <a href="#" style="margin-left: 2px;">(@Model.UniqueDeliveryCitys[Model.Orders[i].DeliveryCity])</a>
                                    }
                                </div>
                            }
                        }
                    </td>

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Принят в обработку"))
                        {
                            <div style="max-width: 150px;" id="td2ProcessingDate" title="@Html.DisplayFor(modelItem => Model.Orders[i].FormattedProcessingDate) @Html.DisplayFor(modelItem => Model.Orders[i].FormattedProcessingTime)">
                                @Html.DisplayFor(modelItem => Model.Orders[i].FormattedProcessingDate)
                            </div>
                        }

                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Дата отгрузки"))
                        {
                            <div class="text-muted" style="max-width: 150px;" title="@Html.DisplayFor(modelItem => Model.Orders[i].FormattedShippingDate) @Html.DisplayFor(modelItem => Model.Orders[i].FormattedShippingTime)">
                                @Html.DisplayFor(modelItem => Model.Orders[i].FormattedShippingDate)
                            </div>
                        }
                    </td>

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Срок доставки"))
                        {
                            <div style="white-space: nowrap; text-align: right;">
                                <div title="@Html.DisplayFor(modelItem => Model.Orders[i].FormattedDeliveryDay) @Html.DisplayFor(modelItem => Model.Orders[i].FormattedDeliveryHours)">@Html.DisplayFor(modelItem => Model.Orders[i].FormattedDeliveryDay)</div>
                            </div>
                        }
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Срок доставки"))
                        {
                            <div style="white-space: nowrap; text-align: right;" class="text-muted">
                                @Html.DisplayFor(modelItem => Model.Orders[i].FormattedTimeLeftDay)
                            </div>
                        }
                    </td>

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус клиента"))
                        {
                            <div class="nowrap" title="@Model.Orders[i].Status">
                                @if (Model.Orders[i].Status != null)
                                {
                                    string status = Model.Orders[i].Status;
                                    if (status.Length > 12)
                                    {
                                        status = status.Substring(0, 12) + "...";
                                    }
                                    @status
                                }
                                else
                                {
                                    <br />
                                }

                            </div>
                        }

                        <div style="margin-top: 12px;"></div>

                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус"))
                        {
                            <div class="text-muted nowrap">
                                <select asp-for="Orders[i].AppStatusId" asp-items="@ViewBag.AppStatuses" class="form-control form-control-sm status-select" style="width: 103px" id="AppStatusId_@Model.Orders[i].Id">
                                    <option value="@Model.Orders[i].AppStatus.Id">@Model.Orders[i].AppStatus.Name</option>
                                </select>
                            </div>

                            <script>
                                document.addEventListener('DOMContentLoaded', (event) => {
                                    // Выбираем все элементы select с классом 'status-select'
                                    const statusSelects = document.querySelectorAll('.status-select');

                                    // Функция для проверки и изменения стиля поля
                                    function checkField(select) {
                                        const selectedText = select.options[select.selectedIndex].text.trim();

                                        // Снимаем все возможные классы
                                        select.classList.remove('highlight-null', 'highlight-success');

                                        // Добавляем соответствующий класс на основе выбранного статуса
                                        if (selectedText === "Заказан поставщику") {
                                            select.classList.add('highlight-success');
                                        } else if (selectedText === "Отменен") {
                                            select.classList.add('highlight-null');
                                        }
                                    }

                                    // Добавляем обработчик изменения для каждого select
                                    statusSelects.forEach(select => {
                                        select.addEventListener('change', function () {
                                            checkField(this);
                                        });

                                        // Изначально проверяем состояние при загрузке страницы
                                        checkField(select);
                                    });
                                });
                            </script>
                        }
                    </td>

                    <td>
                        <div class="container">
                            <div class="row mb-0 justify-content-between">
                                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Key"))
                                {
                                    <div id="thArticle" class="col-md-4 d-flex align-items-center mb-1" style="white-space: nowrap;">
                                        @{
                                            string productKey = Model.Orders[i].ProductKey;
                                            if (productKey != null && productKey.Length > 17)
                                            {
                                                productKey = productKey.Substring(0, 17) + "...";
                                            }
                                        }
                                        @productKey
                                    </div>

                                }
                                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Производитель"))
                                {
                                    <div id="thManufacturer" class="col-md-4 d-flex flex-column mb-1 nowrap text-center">
                                        @Html.DisplayFor(modelItem => Model.Orders[i].Manufacturer.Name)
                                    </div>
                                }
                                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Артикул"))
                                {
                                    <div id="thArticle2" class="col-md-4 d-flex flex-column mb-1 nowrap text-end">
                                        @if (Model.Orders[i].Article != null)
                                        {
                                            @Html.DisplayFor(modelItem => Model.Orders[i].Article)
                                        }
                                    </div>
                                }
                            </div>
                            <div class="row mt-0">
                                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наименование товара"))
                                {
                                    <div id="thProductName" class="custom-width-large d-flex flex-column text-muted">
                                        <div>
                                            <div class="product-cell" title="@Html.DisplayFor(modelItem => Model.Orders[i].ProductName)">
                                                @Html.DisplayFor(modelItem => Model.Orders[i].ProductName)
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>

                    <td>
                    </td>


                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Склад отгрузки"))
                    {
                        <td>
                            @Html.DisplayFor(modelItem => Model.Orders[i].ShipmentWarehouse.Name)
                        </td>
                    }

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Поставщик"))
                        {
                            <div>
                                <div class="form-group">
                                    <select asp-for="Orders[i].SupplierId" asp-items="@ViewBag.Suppliers" class="form-control form-control-sm supplier-select" id="SupplierId_@Model.Orders[i].Id">
                                        <option value="">Выберите поставщика</option>
                                        @foreach (var supplier in Model.Suppliers)
                                        {
                                            int maxNameLength = Model.Suppliers.Max(s => s.Name.Length);
                                            int spacesToAdd = maxNameLength - supplier.Name.Length + 3;
                                            string spaces = new string(' ', spacesToAdd).Replace(" ", "&nbsp;");
                                            <option value="@supplier.Id" data-currency-code="@supplier.CurrencyCode" data-cost-factor="@supplier.CostFactor" data-weight-factor="@supplier.WeightFactor" data-weight-currency-code="@supplier.WeightFactorCurrencyCode">
                                                @supplier.Name @Html.Raw(spaces) @supplier.CurrencyCode
                                            </option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <script>
                                document.addEventListener('DOMContentLoaded', (event) => {
                                    const supplierSelects = document.querySelectorAll('.supplier-select');

                                    function checkField(select) {
                                        const value = select.value.trim().toLowerCase();
                                        const selectedText = select.options[select.selectedIndex].text;

                                        if (value === "" || selectedText.startsWith('Не указан')) {
                                            select.classList.add('highlight-error');
                                        } else {
                                            select.classList.remove('highlight-error');
                                        }
                                    }

                                    supplierSelects.forEach(select => {
                                        select.addEventListener('change', function () {
                                            checkField(this);
                                        });

                                        checkField(select);
                                    });
                                });
                            </script>
                        }

                        <div style="margin-top: 5px;"></div>

                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа поставщику"))
                        {
                            <div class="text-muted">
                                <div class="form-group">
                                    <input asp-for="Orders[i].OrderNumberToSupplier" type="text" class="form-control form-control-sm orderNumberToSupplie-field" id="OrderNumberToSupplier_@Model.Orders[i].Id" />
                                    <span asp-validation-for="Orders[i].OrderNumberToSupplier" class="text-danger" id="OrderNumberToSupplierValidation_@Model.Orders[i].Id"></span>
                                </div>
                            </div>
                        }
                    </td>

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Категория"))
                        {
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    @if (Model.Orders[i].ProductInfo.CommercialCategory != null)
                                    {
                                        string сommercialCategory = Model.Orders[i].ProductInfo.CommercialCategory;
                                        if (сommercialCategory.Length > 14)
                                        {
                                            сommercialCategory = сommercialCategory.Substring(0, 14) + "..." + " ";
                                        }
                                        else
                                        {
                                            сommercialCategory = сommercialCategory + " ";
                                        }
                                        @сommercialCategory
                                    }
                                </div>
                                <span style="margin-left: auto;" class="text-muted">
                                    @Html.DisplayFor(modelItem => Model.Orders[i].ProductInfo.VolumetricWeight)
                                </span>
                            </div>

                        }
                        <div style="margin-top: 18px;"></div>

                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Объемный вес"))
                        {
                            <div style="text-align: left" class="text-muted">
                                <div class="form-group d-flex align-items-center justify-content-end">
                                    <div class="form-group">
                                        <input asp-for="Orders[i].ProductInfo.Weight" class="form-control form-control-sm product-weight-field" id="ProductWeight_@Model.Orders[i].Id" value="@Model.Orders[i].ProductInfo.Weight" style="width: 70px; max-width: 70px;" />
                                        <span asp-validation-for="Orders[i].ProductInfo.Weight" class="text-danger"></span>
                                    </div>
                                    <div style="margin-left: auto; white-space: nowrap;">
                                        <span>Вес кг.</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </td>

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена сайта"))
                        {
                            <div style="text-align: right;">
                                @Html.Raw(string.Format("{0:N0}", Model.Orders[i].ProductInfo.CurrentPriceWithDiscount).Replace(",", " "))
                            </div>
                        }
                        <br />
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Количество"))
                        {
                            <div class="@(Model.Orders[i].Quantity > 1 ? "bg-green-300" : "") text-muted" style="text-align: right;" id="Quantity_@Model.Orders[i].Id">
                                @{
                                    if (Model.Orders[i].Quantity > 1)
                                    {
                                        <b>
                                            @Html.DisplayFor(modelItem => Model.Orders[i].Quantity)
                                        </b>
                                    }
                                    else
                                    {
                                        @Html.DisplayFor(modelItem => Model.Orders[i].Quantity)
                                    }
                                }
                            </div>
                        }
                    </td>

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена"))
                        {
                            <div style="text-align: right;" id="Price_@Model.Orders[i].Id">
                                @Html.Raw(string.Format("{0:N0}", Model.Orders[i].Price).Replace(",", " "))
                            </div>
                        }
                        <br />
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Сумма отправления"))
                        {
                            <div class="text-muted" style="text-align: right;" id="shipmentAmount_@i">
                                @Html.Raw(string.Format("{0:N0}", Model.Orders[i].ShipmentAmount).Replace(",", " "))
                            </div>
                        }
                    </td>

                    <td>
                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена закупки"))
                        {
                            <div class="column-content">
                                <input asp-for="Orders[i].PurchasePrice" type="text" class="form-control form-control-sm purchase-price-field" id="PurchasePrice_@Model.Orders[i].Id" data-order-id="@Model.Orders[i].Id" value="@Model.Orders[i].OriginalPurchasePrice" style="width: 70px; max-width: 70px;" />
                                <div class="form-group" style="font-size: 13px;">
                                    <span class="purchase-price-rub" id="PurchasePriceRub_@Model.Orders[i].Id" style="text-align: left; display: none;"></span>
                                </div>
                            </div>
                        }

                        <script>
                            document.addEventListener('DOMContentLoaded', (event) => {
                                const priceFields = document.querySelectorAll('.purchase-price-field');

                                priceFields.forEach(field => {
                                    field.addEventListener('input', function () {
                                        if (this.value.trim() === "") {
                                            this.classList.add('highlight-error');
                                        } else {
                                            this.classList.remove('highlight-error');
                                        }
                                    });

                                    // Initial check if the field is empty on page load
                                    if (field.value.trim() === "") {
                                        field.classList.add('highlight-error');
                                    }
                                });
                            });
                        </script>

                        <script>
                            $(document).ready(function () {
                                // Обработка изменения поставщика в индивидуальных полях
                                $('.supplier-select').on('change', function () {
                                    var orderId = $(this).attr('id').split('_')[1];
                                    var selectedSupplier = $(this).find('option:selected');
                                    var currencyCode = selectedSupplier.data('currency-code');

                                    if (currencyCode) {
                                        $('#CurrencyCode_' + orderId).text(currencyCode);
                                    } else {
                                        $('#CurrencyCode_' + orderId).text('');
                                    }
                                });
                            });
                        </script>

                        <div style="margin-top: 10px;"></div>

                        @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Себестоимость"))
                        {
                            <div class="text-muted">
                                <span id="CostPrice_@Model.Orders[i].Id" style="text-align: left;"></span>
                            </div>
                        }
                    </td>



                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Комиссия ОЗОН"))
                    {
                        @if (Model.Orders[i].MinOzonCommission == 0 && Model.Orders[i].MaxOzonCommission == 0)
                        {
                            <td style="text-align: right;">
                                <div class="form-group d-flex align-items-center justify-content-end mb-2">
                                    <div class="flex-grow-1">
                                        <input asp-for="Orders[i].MinOzonCommission" class="form-control form-control-sm ozon-commission-field" id="MinOzonCommission_@Model.Orders[i].Id" style="text-align: right;" />
                                        <span asp-validation-for="Orders[i].MinOzonCommission" class="text-danger" id="MinOzonCommissionValidation_@Model.Orders[i].Id"></span>
                                    </div>
                                    <div style="margin-left: auto;">
                                        <span>min.</span>
                                    </div>
                                </div>

                                <div class="form-group d-flex align-items-center justify-content-end">
                                    <div class="flex-grow-1">
                                        <input asp-for="Orders[i].MaxOzonCommission" class="form-control form-control-sm ozon-commission-field" id="MaxOzonCommission_@Model.Orders[i].Id" style="text-align: right;" />
                                        <span asp-validation-for="Orders[i].MaxOzonCommission" class="text-danger" id="MaxOzonCommissionValidation_@Model.Orders[i].Id"></span>
                                    </div>
                                    <div style="margin-left: auto;">
                                        <span>max.</span>
                                    </div>
                                </div>

                            </td>

                        }
                        else
                        {
                            <td style="text-align: right;">
                                <div id="MinOzonCommission_@Model.Orders[i].Id">
                                    @Html.Raw(string.Format("{0:N0}", Model.Orders[i].MinOzonCommission).Replace(",", " "))
                                </div>
                                <br />
                                <div id="MaxOzonCommission_@Model.Orders[i].Id">
                                    @Html.Raw(string.Format("{0:N0}", Model.Orders[i].MaxOzonCommission).Replace(",", " "))
                                </div>
                            </td>
                        }
                    }

                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Прибыль"))
                    {
                        <td style="text-align: right;">
                            <div id="MaxProfit_@Model.Orders[i].Id">
                                @if (Model.Orders[i].MaxProfit < 0)
                                {
                                    <span style="color:red">@Html.DisplayFor(modelItem => Model.Orders[i].MaxProfit)</span>
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => Model.Orders[i].MaxProfit)
                                }
                            </div>
                            <br />
                            <div id="MinProfit_@Model.Orders[i].Id">
                                @if (Model.Orders[i].MinProfit < 0)
                                {
                                    <span style="color:red">@Html.DisplayFor(modelItem => Model.Orders[i].MinProfit)</span>
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => Model.Orders[i].MinProfit)
                                }
                            </div>
                        </td>
                    }

                    @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наценка %"))
                    {
                        <td style="text-align: right;">
                            <div id="MaxDiscount_@Model.Orders[i].Id">
                                @if (Model.Orders[i].MaxDiscount < 0)
                                {
                                    <span style="color:red">@Html.DisplayFor(modelItem => Model.Orders[i].MaxDiscount)</span>
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => Model.Orders[i].MaxDiscount)
                                }
                            </div>
                            <br />
                            <div id="MinDiscount_@Model.Orders[i].Id">
                                @if (Model.Orders[i].MinDiscount < 0)
                                {
                                    <span style="color:red">@Html.DisplayFor(modelItem => Model.Orders[i].MinDiscount)</span>
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => Model.Orders[i].MinDiscount)
                                }
                            </div>
                        </td>

                        <input asp-for="Orders[i].MinOzonCommission" type="hidden" />
                        <input asp-for="Orders[i].MaxOzonCommission" type="hidden" />
                    }
                </tr>
            }
        </tbody>
    </table>

    <div id="selectedSuppliersList"></div>

    <input type="hidden" asp-for="RedirectPage" />

    <div class="form-group">
        <div class="input-group">
            <span class="input-group-btn">
                <input type="submit" value="Сохранить" class="btn btn-primary" style="margin-left: 10px;" />
            </span>
        </div>
    </div>
</form>


<div>
    <a asp-action="Index">К списку заказов</a>
</div>

<script>
    // Функция для извлечения числового значения из строки
    function extractNumber(text) {
        if (typeof text !== 'string') {
            text = String(text); // Преобразуем в строку, если это не строка
        }
        const number = parseFloat(text.replace(/\s/g, '').replace(',', '.'));
        return isNaN(number) ? null : number;
    }
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const supplierSelects = document.querySelectorAll('.supplier-select');
        const selectedSuppliers = {};

        function extractNumber(text) {
            const match = text.match(/(\d+(\.\d+)?)/);
            return match ? parseFloat(match[0]) : 0;
        }

        function updateSelectedSuppliers() {
            // Очистка текущего состояния
            for (const key in selectedSuppliers) {
                if (selectedSuppliers.hasOwnProperty(key)) {
                    selectedSuppliers[key] = { count: 0, totalAmount: 0, totalQuantity: 0, totalPurchasePrice: 0 };
                }
            }

            // Пересчет значений для не удаленных строк
            document.querySelectorAll('#shipmentTable tbody tr').forEach((row) => {
                const supplierSelect = row.querySelector('.supplier-select');
                const shipmentAmount = parseFloat(row.querySelector('[id^="shipmentAmount_"]')?.textContent) || 0;
                const quantity = parseFloat(row.querySelector('[id^="Quantity_"]')?.textContent) || 0; // Изменено на 'Quantity_'
                const purchasePriceText = row.querySelector('[id^="PurchasePriceRub_"]')?.textContent || '0';
                const purchasePrice = extractNumber(purchasePriceText);

                const selectedOption = supplierSelect.options[supplierSelect.selectedIndex];
                const supplierName = selectedOption.text;

                if (selectedOption.value) {
                    if (selectedSuppliers[supplierName]) {
                        selectedSuppliers[supplierName].count++;
                        selectedSuppliers[supplierName].totalAmount += shipmentAmount;
                        selectedSuppliers[supplierName].totalQuantity += quantity;
                        selectedSuppliers[supplierName].totalPurchasePrice += purchasePrice;
                    } else {
                        selectedSuppliers[supplierName] = { count: 1, totalAmount: shipmentAmount, totalQuantity: quantity, totalPurchasePrice: purchasePrice };
                    }
                }
            });

            // Обновление таблицы SelectedSuppliers
            const selectedSuppliersList = document.getElementById('selectedSuppliersList');
            selectedSuppliersList.innerHTML = '';

            const table = document.createElement('table');
            table.classList.add('table', 'table-striped');

            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            ['Поставщик', 'Заказы у поставщика', 'Количество заказов', 'Сумма отправления', 'Цена закупки RUB'].forEach(headerText => {
                const th = document.createElement('th');
                th.textContent = headerText;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);
            table.appendChild(thead);

            const tbody = document.createElement('tbody');
            for (const [supplier, data] of Object.entries(selectedSuppliers)) {
                if (data.count > 0) {
                    const row = document.createElement('tr');
                    const supplierCell = document.createElement('td');
                    supplierCell.textContent = supplier;
                    row.appendChild(supplierCell);

                    const countCell = document.createElement('td');
                    countCell.textContent = data.count;
                    row.appendChild(countCell);

                    const quantityCell = document.createElement('td');
                    quantityCell.textContent = data.totalQuantity;
                    row.appendChild(quantityCell);

                    const amountCell = document.createElement('td');
                    amountCell.textContent = data.totalAmount.toFixed(2);
                    row.appendChild(amountCell);

                    const purchasePriceCell = document.createElement('td');
                    purchasePriceCell.textContent = data.totalPurchasePrice.toFixed(2);
                    row.appendChild(purchasePriceCell);

                    tbody.appendChild(row);
                }
            }
            table.appendChild(tbody);

            selectedSuppliersList.appendChild(table);
        }

        // Глобальная функция для обновления списка
        window.updateSupplierList = updateSelectedSuppliers;

        supplierSelects.forEach((select, index) => {
            select.addEventListener('change', updateSelectedSuppliers);

            // Инициализация начального состояния
            const initialSelectedOption = select.options[select.selectedIndex];
            if (initialSelectedOption.value) {
                const initialSupplierName = initialSelectedOption.text;
                const initialShipmentAmount = parseFloat(document.querySelector('#shipmentAmount_' + index)?.textContent) || 0;
                const initialQuantity = parseFloat(document.querySelector('#Quantity_' + index)?.textContent) || 0; // Изменено на 'Quantity_'
                const initialPurchasePriceText = document.querySelector('#PurchasePriceRub_' + index)?.textContent || '0';
                const initialPurchasePrice = extractNumber(initialPurchasePriceText);

                if (selectedSuppliers[initialSupplierName]) {
                    selectedSuppliers[initialSupplierName].count++;
                    selectedSuppliers[initialSupplierName].totalAmount += initialShipmentAmount;
                    selectedSuppliers[initialSupplierName].totalQuantity += initialQuantity;
                    selectedSuppliers[initialSupplierName].totalPurchasePrice += initialPurchasePrice;
                } else {
                    selectedSuppliers[initialSupplierName] = { count: 1, totalAmount: initialShipmentAmount, totalQuantity: initialQuantity, totalPurchasePrice: initialPurchasePrice };
                }
            }
        });

        // Обновляем список при загрузке страницы
        updateSelectedSuppliers();
    });

</script>



<script>
    $(document).ready(function () {
        // Обработка изменения поставщика в индивидуальных полях
        $('.supplier-select').on('change', function () {
            var selectedSupplier = $(this).find('option:selected');
            var currencyCode = selectedSupplier.data('currency-code');
            var orderId = $(this).attr('id').split('_')[1]; // Извлекаем ID заказа из ID элемента

            if (currencyCode) {
                $('#CurrencyCode_' + orderId).text(currencyCode);
            } else {
                $('#CurrencyCode_' + orderId).text('');
            }
        });

        // Обработка изменения поставщика в общем поле
        $('#universalSelect').on('change', function () {
            var selectedSupplier = $(this).find('option:selected');
            var supplierId = selectedSupplier.val();
            var currencyCode = selectedSupplier.data('currency-code');

            $('.supplier-select').each(function () {
                $(this).val(supplierId).trigger('change');
            });

            $('.currency-code').each(function () {
                if (currencyCode) {
                    $(this).text(currencyCode);
                } else {
                    $(this).text('');
                }
            });
        });
    });
</script>

<script>
    $(document).ready(function () {
        // Получаем значения курсов валют из Razor View
        var rateUSD = @Model.RateUSD.ToString().Replace(',', '.');
        var rateEUR = @Model.RateEUR.ToString().Replace(',', '.');
        var rateBYN = @Model.RateBYN.ToString().Replace(',', '.');

        // Обработка изменения поставщика в индивидуальных полях
        $('.supplier-select').on('change', function () {
            var selectedSupplier = $(this).find('option:selected');
            var weightFactor = parseFloat(selectedSupplier.data('weight-factor')) || 0;
            var orderId = $(this).attr('id').split('_')[1]; // Извлекаем ID заказа из ID элемента
            var weightInput = $('#ProductWeight_' + orderId);

            // Если весовой коэффициент равен 0, устанавливаем поле веса в 0 и делаем его readonly
            if (weightFactor === 0) {
                weightInput.val('0').prop('readonly', true);
            } else {
                weightInput.prop('readonly', false); // Включаем возможность редактирования
            }

            // Пример: обновляем другие значения на странице
            var currencyCode = selectedSupplier.data('currency-code');
            var weightCurrencyCode = selectedSupplier.data('weight-currency-code');
            var costFactor = parseFloat(selectedSupplier.data('cost-factor').toString().replace(',', '.')) || 1;

            if (currencyCode) {
                $('#CurrencyCode_' + orderId).text(currencyCode);
                var purchasePriceInRub = updatePurchasePriceInRub(orderId, currencyCode, costFactor);
                updateCostPrice(orderId, currencyCode, costFactor, weightCurrencyCode, purchasePriceInRub);
            } else {
                $('#CurrencyCode_' + orderId).text('');
                $('#PurchasePriceRub_' + orderId).text('');
                $('#CostPrice_' + orderId).text('');
            }
        });

        // Обработка изменения значения purchase price
        $('.purchase-price-field').on('input', function () {
            var orderId = $(this).attr('id').split('_')[1];
            var selectedSupplier = $('#SupplierId_' + orderId).find('option:selected');
            var currencyCode = selectedSupplier.data('currency-code');
            var weightCurrencyCode = selectedSupplier.data('weight-currency-code');
            var costFactor = parseFloat(selectedSupplier.data('cost-factor').toString().replace(',', '.')) || 1;

            var purchasePriceInRub = updatePurchasePriceInRub(orderId, currencyCode, costFactor);
            updateCostPrice(orderId, currencyCode, costFactor, weightCurrencyCode, purchasePriceInRub);
            updateCalculations(orderId);
            window.updateSupplierList(); // Используем глобальную переменную
        });

        // Обработка изменения значения веса
        $('.product-weight-field').on('input', function () {
            var orderId = $(this).attr('id').split('_')[1];
            var selectedSupplier = $('#SupplierId_' + orderId).find('option:selected');
            var currencyCode = selectedSupplier.data('currency-code');
            var weightCurrencyCode = selectedSupplier.data('weight-currency-code');
            var costFactor = parseFloat(selectedSupplier.data('cost-factor').toString().replace(',', '.')) || 1;

            var purchasePriceInRub = updatePurchasePriceInRub(orderId, currencyCode, costFactor);
            updateCostPrice(orderId, currencyCode, costFactor, weightCurrencyCode, purchasePriceInRub);
            updateCalculations(orderId);
            window.updateSupplierList(); // Используем глобальную переменную
        });

        // Обработка изменения значения комиссий Ozon
        $('.ozon-commission-field').on('input', function () {
            var orderId = $(this).attr('id').split('_')[1];
            updateCalculations(orderId);
        });

        // Вызываем обновление при загрузке страницы для каждого элемента
        $('.supplier-select').each(function () {
            var orderId = $(this).attr('id').split('_')[1];
            var selectedSupplier = $(this).find('option:selected');
            var currencyCode = selectedSupplier.data('currency-code');
            var weightCurrencyCode = selectedSupplier.data('weight-currency-code');
            var costFactor = parseFloat(selectedSupplier.data('cost-factor').toString().replace(',', '.')) || 1;

            if (currencyCode) {
                $('#CurrencyCode_' + orderId).text(currencyCode);
                var purchasePriceInRub = updatePurchasePriceInRub(orderId, currencyCode, costFactor);
                updateCostPrice(orderId, currencyCode, costFactor, weightCurrencyCode, purchasePriceInRub);
            } else {
                $('#CurrencyCode_' + orderId).text('');
                $('#PurchasePriceRub_' + orderId).text('');
                $('#CostPrice_' + orderId).text('');
            }
        });

        // Вызываем обновление вычислений при загрузке страницы для каждого элемента
        $('.purchase-price-field, .ozon-commission-field').each(function () {
            var orderId = $(this).attr('id').split('_')[1];
            updateCalculations(orderId);
        });

        function updatePurchasePriceInRub(orderId, currencyCode, costFactor) {
            var purchasePrice = parseFloat($('#PurchasePrice_' + orderId).val());
            var purchasePriceInRub = 0;
            var titleText = '';

            switch (currencyCode) {
                case 'USD':
                    purchasePriceInRub = purchasePrice * costFactor * rateUSD;
                    titleText = `${purchasePrice} (Цена закупки USD) * ${costFactor} (Коэффициент) * ${rateUSD} (Курс USD) = ${purchasePriceInRub}`;
                    break;
                case 'EUR':
                    purchasePriceInRub = purchasePrice * costFactor * rateEUR;
                    titleText = `${purchasePrice} (Цена закупки EUR) * ${costFactor} (Коэффициент) * ${rateEUR} (Курс EUR) = ${purchasePriceInRub}`;
                    break;
                case 'BYN':
                    purchasePriceInRub = purchasePrice * costFactor * rateBYN;
                    titleText = `${purchasePrice} (Цена закупки BYN) * ${costFactor} (Коэффициент) * ${rateBYN} (Курс BYN) = ${purchasePriceInRub}`;
                    break;
                default:
                    purchasePriceInRub = purchasePrice * costFactor;
                    titleText = `${purchasePrice} (Цена закупки RUB) * ${costFactor} = ${purchasePriceInRub}`;
                    break;
            }

            $('#PurchasePrice_' + orderId).attr('title', titleText);

            $('#PurchasePriceRub_' + orderId).text(!isNaN(purchasePriceInRub) ? Math.round(purchasePriceInRub) + ' RUB' : '');
            $('#PurchasePriceRub_' + orderId).attr('title', titleText);
            $('#PurchasePrice_' + orderId).data('purchase-price-rub', purchasePriceInRub);

            return purchasePriceInRub;
        }

        function updateCostPrice(orderId, currencyCode, costFactor, weightCurrencyCode, purchasePriceInRub) {
            var weight = parseFloat($('#ProductWeight_' + orderId).val());
            var supplierWeightFactor = parseFloat($('#SupplierId_' + orderId).find('option:selected').data('weight-factor').toString().replace(',', '.')) || 0;
            var supplierWeightFactorInRub = 0;

            var supplierWeightFactorInRubTitle = ``;
            switch (weightCurrencyCode) {
                case 'USD':
                    supplierWeightFactorInRub = supplierWeightFactor * rateUSD;
                    supplierWeightFactorInRubTitle = ` = ${supplierWeightFactor} * ${rateUSD}`;
                    break;
                case 'EUR':
                    supplierWeightFactorInRub = supplierWeightFactor * rateEUR;
                    supplierWeightFactorInRubTitle = ` = ${supplierWeightFactor} * ${rateEUR}`;
                    break;
                case 'BYN':
                    supplierWeightFactorInRub = supplierWeightFactor * rateBYN;
                    supplierWeightFactorInRubTitle = ` = ${supplierWeightFactor} * ${rateBYN}`;
                    break;
                default:
                    supplierWeightFactorInRub = supplierWeightFactor;
                    break;
            }

            var costPrice = 0;
            var titleText = '';

            if (!isNaN(weight) && !isNaN(supplierWeightFactor) && !isNaN(purchasePriceInRub) && supplierWeightFactorInRub != 0) {
                costPrice = (weight * supplierWeightFactorInRub) + purchasePriceInRub;
                titleText = `${weight} (Вес) * ${supplierWeightFactorInRub} (Цена за кг. RUB${supplierWeightFactorInRubTitle}) + ${purchasePriceInRub} (Цена закупки RUB) = ${costPrice}`;
            } else if (!isNaN(purchasePriceInRub)) {
                costPrice = purchasePriceInRub;
                titleText = `${purchasePriceInRub} (Цена закупки RUB) = ${costPrice}`;
            } else {
                $('#CostPrice_' + orderId).text('');
                $('#CostPrice_' + orderId).attr('title', '');
                $('#CostPrice_' + orderId).data('cost-price', '');
                updateCalculations(orderId);
                return;
            }

            $('#CostPrice_' + orderId).text(Math.round(costPrice) + ' RUB');
            $('#CostPrice_' + orderId).attr('title', titleText);
            $('#CostPrice_' + orderId).data('cost-price', costPrice);

            updateCalculations(orderId);
        }



        function updateCalculations(orderId) {
            var costPrice = extractNumber($('#CostPrice_' + orderId).data('cost-price'));
            var price = extractNumber($('#Price_' + orderId).text());

            if (costPrice === null || costPrice === 0) {
                // Если costPrice равен null или 0, не выполнять расчеты
                $('#MinProfit_' + orderId).text('');
                $('#MaxProfit_' + orderId).text('');
                $('#MaxDiscount_' + orderId).text('');
                $('#MinDiscount_' + orderId).text('');
                return;
            }

            var minOzonCommission = extractNumber($('#MinOzonCommission_' + orderId).val() || $('#MinOzonCommission_' + orderId).text());
            var maxOzonCommission = extractNumber($('#MaxOzonCommission_' + orderId).val() || $('#MaxOzonCommission_' + orderId).text());

            var startCommission = price - costPrice;
            var minProfit = startCommission - maxOzonCommission;
            var maxProfit = startCommission - minOzonCommission;
            var minDiscount = (minProfit / costPrice) * 100;
            var maxDiscount = (maxProfit / costPrice) * 100;

            // Округляем до целого числа и обрезаем до 4 знаков, если нужно
            minProfit = Math.floor(minProfit);
            maxProfit = Math.floor(maxProfit);
            minDiscount = Math.floor(minDiscount);
            maxDiscount = Math.floor(maxDiscount);

            var displayMinProfit = minProfit > 9999 ? minProfit.toString().slice(0, 4) + '...' : minProfit.toString();
            var displayMaxProfit = maxProfit > 9999 ? maxProfit.toString().slice(0, 4) + '...' : maxProfit.toString();
            var displayMinDiscount = minDiscount > 9999 ? minDiscount.toString().slice(0, 4) + '...' : minDiscount.toString();
            var displayMaxDiscount = maxDiscount > 9999 ? maxDiscount.toString().slice(0, 4) + '...' : maxDiscount.toString();

            $('#MinProfit_' + orderId).text(!isNaN(minProfit) ? displayMinProfit : "");
            $('#MaxProfit_' + orderId).text(!isNaN(maxProfit) ? displayMaxProfit : "");
            $('#MaxDiscount_' + orderId).text(!isNaN(maxDiscount) ? displayMaxDiscount + ' %' : "");
            $('#MinDiscount_' + orderId).text(!isNaN(minDiscount) ? displayMinDiscount + ' %' : "");

            $('#MinProfit_' + orderId).css('color', minProfit < 0 ? 'red' : '');
            $('#MaxProfit_' + orderId).css('color', maxProfit < 0 ? 'red' : '');
            $('#MaxDiscount_' + orderId).css('color', maxDiscount < 0 ? 'red' : '');
            $('#MinDiscount_' + orderId).css('color', minDiscount < 0 ? 'red' : '');

            // Добавляем title к полям
            $('#MinProfit_' + orderId).attr('title', `${price} (Цена) - ${costPrice} (Себестоимость) - ${maxOzonCommission} (Макс. Комиссия ОЗОН) = ${minProfit}`);
            $('#MaxProfit_' + orderId).attr('title', `${price} (Цена) - ${costPrice} (Себестоимость) - ${minOzonCommission} (Мин. Комиссия ОЗОН) = ${maxProfit}`);

            $('#MaxDiscount_' + orderId).attr('title', `${maxProfit} (Макс. Прибыль) / ${costPrice} (Себестоимость) * 100 = ${maxDiscount}%`);
            $('#MinDiscount_' + orderId).attr('title', `${minProfit} (Мин. Прибыль) / ${costPrice} (Себестоимость) * 100 = ${minDiscount}%`);
        }
    });
</script>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Находим общее поле для ввода и все целевые поля для обновления
        var universalField = document.getElementById('universalOrderNumberToSupplier');
        var universalOrderNumberToSupplier = document.querySelectorAll('.orderNumberToSupplie-field');

        // Добавляем обработчик события на изменение значения общего поля
        universalField.addEventListener('input', function () {
            var value = this.value; // Получаем текущее значение из общего поля

            // Обновляем значения целевых полей в цикле
            universalOrderNumberToSupplier.forEach(function (field) {
                field.value = value;
            });
        });
    });

</script>

<script>

    // Функция для чтения куки
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Функция для обработки состояния каждого чекбокса
    function processCheckboxState(checkboxId, checkboxState) {
        switch (checkboxId) {
            case 'chk1':
                toggleColumnVisibility(1, checkboxState);
                break;
            case 'chk2':
                toggleColumnVisibility(2, checkboxState);
                break;
            case 'chk3':
                toggleColumnVisibility(3, checkboxState);
                break;
            case 'chk4':
                toggleColumnVisibility(4, checkboxState);
                break;
            case 'chk5':
                toggleColumnVisibility(5, checkboxState);
                break;
            case 'chk6':
                toggleColumnVisibility(6, checkboxState);
                break;
            case 'chk7':
                toggleColumnVisibility(7, checkboxState);
                break;
            case 'chk8':
                toggleColumnVisibility(8, checkboxState);
                break;
            case 'chk9':
                toggleColumnVisibility(9, checkboxState);
                break;
            case 'chk10':
                toggleColumnVisibility(10, checkboxState);
                break;
            case 'chk11':
                toggleColumnVisibility(11, checkboxState);
                break;
            case 'chk12':
                toggleColumnVisibility(12, checkboxState);
                break;
            case 'chk13':
                toggleColumnVisibility(13, checkboxState);
                break;
            case 'chk14':
                toggleColumnVisibility(14, checkboxState);
                break;
            case 'chk15':
                toggleColumnVisibility(15, checkboxState);
                break;
            case 'chk16':
                toggleColumnVisibility(16, checkboxState);
                break;
            case 'chk17':
                toggleColumnVisibility(17, checkboxState);
                break;
            case 'chk18':
                toggleColumnVisibility(18, checkboxState);
                break;
            case 'chk19':
                toggleColumnVisibility(19, checkboxState);
                break;
            case 'chk20':
                toggleColumnVisibility(20, checkboxState);
                break;
            case 'chk21':
                toggleColumnVisibility(21, checkboxState);
                break;
            case 'chk22':
                toggleColumnVisibility(22, checkboxState);
                break;
            case 'chk23':
                toggleColumnVisibility(23, checkboxState);
                break;
            case 'chk24':
                toggleColumnVisibility(24, checkboxState);
                break;
            case 'chk25':
                toggleColumnVisibility(25, checkboxState);
                break;
        }
    }

    // Получаем блок modal-body
    const modalBody = document.querySelector('.modal-body-checkbox');

    // Получаем все чекбоксы внутри блока modal-body
    const checkboxes = modalBody.querySelectorAll('input[type="checkbox"]');

    // Устанавливаем начальное состояние чекбоксов из кук
    checkboxes.forEach(function (checkbox) {
        const checkboxId = checkbox.id;
        const checkboxState = getCookie(checkboxId);

        console.log(getCookie(checkboxId));

        if (checkboxState !== undefined) {
            checkbox.checked = checkboxState === 'true';
            processCheckboxState(checkboxId, checkboxState);
            console.log(1)
        }
    });

    // Перебираем чекбоксы и добавляем обработчик события change
    checkboxes.forEach(function (checkbox) {
        checkbox.addEventListener('change', function (event) {
            const checkboxId = event.target.id;
            const checkboxState = event.target.checked;
            document.cookie = `${checkboxId}=${checkboxState}`;
            processCheckboxState(checkboxId, checkboxState);
        });
    });

    // Функция для скрытия и раскрытия столбца таблицы по его ID
    function toggleColumnVisibility(columnIndex, isVisible) {
        const table = document.getElementById("shipmentTable");
        if (table) {
            const rows = table.rows;
            for (let i = 0; i < rows.length; i++) {
                const cells = rows[i].cells;

                isVisible = typeof isVisible === 'string' ? isVisible.toLowerCase() === 'true' : isVisible;

                if (!isVisible) {
                    console.log("none")
                    cells[columnIndex].style.display = 'none';

                }
                else {
                    console.log("none2")
                    cells[columnIndex].style.display = '';
                }

            }
        }
    }
</script>