@using OzonOrdersWeb.ViewModels.OrderViewModels

@model EditOrderViewModel;

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script asp-src-include="~/js/**/*.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<h4>Изменить заказ</h4>
<hr />
<form asp-action="Edit">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="Order.Id" />
<table class="table table-striped" id="shipmentTable">
    <thead>
        <tr>
            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа"))
            {
                    <th>
                        Номер заказа
                    </th>
             }
            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Клиент"))
            {
                <th>
                    Клиент
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Принят в обработку"))
            {
                <th>
                    Принят в обработку
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Дата отгрузки"))
            {
                <th>
                    Дата отгрузки
                </th>
            }
            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Срок доставки"))
            {
                <th>
                    Срок доставки
                </th>                  
            }
            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус клиента"))
            {
                <th>
                    Статус клиента
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус"))
            {
                <th>
                    Статус
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наименование товара"))
            {
                <th>
                    Наименование товара
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Артикул"))
            {
                <th>
                    Артикул
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Производитель"))
            {
                <th>
                    Производитель
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Склад отгрузки"))
            {
                <th>
                    Склад отгрузки
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Поставщик"))
            {
                <th>
                    Поставщик
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа поставщику"))
            {
                <th>
                    Номер заказа поставщику
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена сайта"))
            {
                <th>
                    Цена сайта
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена"))
            {
                <th>
                    Цена
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Количество"))
            {
                <th>
                    Кол.
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Сумма отправления"))
            {
                <th>
                    Сумма отправления
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Категория"))
            {
                <th>
                    Категория
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Объемный вес"))
            {
                <th>
                    Объемный вес
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена закупки"))
            {
                <th colspan="4" style="text-align: right; white-space: nowrap;">
                    Цена закупки
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Комиссия ОЗОН"))
            {
                <th>
                    Комиссия ОЗОН
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Прибыль"))
            {
                <th>
                    Прибыль
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наценка %"))
            {
                <th>
                    Наценка %
                </th>
            }

            @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Город доставки"))
            {
                <th>
                    Город доставки
                </th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        
            <div class="form-group" style="display: none">
                <label asp-for="Order.Key" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.Key" class="form-control" />
                <span asp-validation-for="Order.Key" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.ShipmentNumber" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.ShipmentNumber" class="form-control" />
                <span asp-validation-for="Order.ShipmentNumber" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.OzonClient" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.OzonClient" class="form-control" />
                <span asp-validation-for="Order.OzonClient" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.ProcessingDate" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.ProcessingDate" class="form-control" />
                <span asp-validation-for="Order.ProcessingDate" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.ShippingDate" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.ShippingDate" class="form-control" />
                <span asp-validation-for="Order.ShippingDate" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.Status" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.Status" class="form-control" />
                <span asp-validation-for="Order.Status" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.ProductName" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.ProductName" class="form-control" />
                <span asp-validation-for="Order.ProductName" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.ProductKey" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.ProductKey" class="form-control" />
                <span asp-validation-for="Order.ProductKey" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.Quantity" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.Quantity" class="form-control" />
                <span asp-validation-for="Order.Quantity" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.ShipmentAmount" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.ShipmentAmount" class="form-control" />
                <span asp-validation-for="Order.ShipmentAmount" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.Price" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.Price" class="form-control" />
                <span asp-validation-for="Order.Price" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.MinOzonCommission" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.MinOzonCommission" class="form-control" />
                <span asp-validation-for="Order.MinOzonCommission" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.MaxOzonCommission" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.MaxOzonCommission" class="form-control" />
                <span asp-validation-for="Order.MaxOzonCommission" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.MaxProfit" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.MaxProfit" class="form-control" />
                <span asp-validation-for="Order.MaxProfit" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.MinDiscount" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.MinDiscount" class="form-control" />
                <span asp-validation-for="Order.MinDiscount" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none">
                <label asp-for="Order.DeliveryCity" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.DeliveryCity" class="form-control" />
                <span asp-validation-for="Order.DeliveryCity" class="text-danger"></span>
            </div>
            
            <div class="form-group" style="display: none">
                <label asp-for="Order.UpdatedBy" class="control-label"></label><span style="margin-left: 10px; color: gray;">/ </span>
                <input asp-for="Order.UpdatedBy" class="form-control" value="@User.Identity.Name" />
                <span asp-validation-for="Order.UpdatedBy" class="text-danger"></span>
            </div>


            <tr>
                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.ShipmentNumber)
                    </td>
                }
                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Клиент"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.OzonClient.Name)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Принят в обработку"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.FormattedProcessingDate) <br /> @Html.DisplayFor(modelItem => Model.Order.FormattedProcessingTime)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Дата отгрузки"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.FormattedShippingDate) <br /> @Html.DisplayFor(modelItem => Model.Order.FormattedShippingTime)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Срок доставки"))
                {
                    <td style="white-space: nowrap; text-align: right;">
                        @Html.DisplayFor(modelItem => Model.Order.FormattedDeliveryDay)
                        <br />
                        @Html.DisplayFor(modelItem => Model.Order.FormattedDeliveryHours)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус клиента"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.Status)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Статус"))
                {
                    <td>
                        <div class="form-group">
                            <select asp-for="Order.AppStatusId" asp-items="@ViewBag.AppStatuses" class="form-control">
                                <option value="">Выберите статус</option>
                            </select>
                            <a asp-controller="AppStatus" asp-action="Create">Создать статус</a>
                        </div>
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наименование товара"))
                {
                    <td>
                        @{
                            string first15Chars = string.Empty;
                            if (!string.IsNullOrEmpty(Model.Order.ProductName))
                            {
                                first15Chars = Model.Order.ProductName.Length > 45 ? Model.Order.ProductName.Substring(0, 45) + "..." : Model.Order.ProductName;
                            }
                        }

                        @Html.DisplayFor(modelItem => first15Chars)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Артикул"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.ProductKey)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Производитель"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.Manufacturer.Name)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Склад отгрузки"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.ShipmentWarehouse.Name)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Поставщик"))
                {
                    <td>
                        <div class="form-group">
                            <select asp-for="Order.SupplierId" asp-items="@ViewBag.Suppliers" class="form-control supplier-select" id="SupplierId">
                                <option value="">Выберите поставщика</option>
                                @foreach (var supplier in Model.Suppliers)
                                {
                                    <option value="@supplier.Id" data-currency-code="@supplier.CurrencyCode" data-cost-factor="@supplier.CostFactor">@supplier.Name @supplier.CurrencyCode</option>
                                }
                                <option value="create" class="link-option" data-url="@Url.Action("Create", "Supplier")">Создать поставщика</option>
                            </select>
                        </div>
                    </td>
                    <script>
                        // Обработка клика по ссылке внутри select
                        $(function () {
                            $('#SupplierId').change(function () {
                                var selectedValue = $(this).val();
                                if (selectedValue == 'create') {
                                    var url = $('option:selected', this).data('url');
                                    if (url) {
                                        window.location.href = url; // Перенаправление на URL
                                    }
                                }
                            });
                        });
                    </script>
                }
                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Номер заказа поставщику"))
                {
                    <td style="text-align: right;">
                        <div class="form-group">
                            <input asp-for="Order.OrderNumberToSupplier" type="text" class="form-control orderNumberToSupplie-field" />
                            <span asp-validation-for="Order.OrderNumberToSupplier" class="text-danger"></span>
                        </div>
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена сайта"))
                {
                    <td style="text-align: right;">
                        @Html.DisplayFor(modelItem => Model.Order.ProductInfo.CurrentPriceWithDiscount)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена"))
                {
                    <td id="Price" style="text-align: right;">
                        @Html.DisplayFor(modelItem => Model.Order.Price)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Количество"))
                {
                    <td style="text-align: center;">
                        @{
                            if (Model.Order.Quantity > 1)
                            {
                                <b>
                                    @Html.DisplayFor(modelItem => Model.Order.Quantity)
                                </b>
                            }
                            else
                            {
                                @Html.DisplayFor(modelItem => Model.Order.Quantity)
                            }
                        }
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Сумма отправления"))
                {
                    <td style="text-align: right;">
                        @Html.DisplayFor(modelItem => Model.Order.ShipmentAmount)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Категория"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.ProductInfo.CommercialCategory)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Объемный вес"))
                {
                    <td style="text-align: center;">
                        @Html.DisplayFor(modelItem => Model.Order.ProductInfo.VolumetricWeight)
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Цена закупки"))
                {
                    <td colspan="4" style="text-align: right; white-space: nowrap;">
                        <div class="form-group d-flex align-items-center">
                            <div class="flex-grow-1">
                                <input asp-for="Order.PurchasePrice" type="text" class="form-control purchase-price-field" id="PurchasePrice" />
                                <span asp-validation-for="Order.PurchasePrice" class="text-danger" id="PurchasePriceValidation"></span>
                            </div>
                            <div class="ml-2">
                                <span class="currency-code" id="CurrencyCode"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <span class="purchase-price-rub ml-2" id="PurchasePriceRub"></span>
                        </div>
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Комиссия ОЗОН"))
                {
                    <td style="text-align: right;">
                        <div id="MinOzonCommission">@Html.DisplayFor(modelItem => Model.Order.MinOzonCommission)</div>
                        <br />
                        <div id="MaxOzonCommission">@Html.DisplayFor(modelItem => Model.Order.MaxOzonCommission)</div>
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Прибыль"))
                {
                    <td style="text-align: right;">
                        <div id="MaxProfitContainer">
                            @if (Model.Order.MaxProfit < 0)
                            {
                                <span style="color:red" id="MaxProfit">@Html.DisplayFor(modelItem => Model.Order.MaxProfit)</span>
                            }
                            else
                            {
                                <span id="MaxProfit">@Html.DisplayFor(modelItem => Model.Order.MaxProfit)</span>
                            }
                        </div>
                        <br />
                        <div id="MinProfitContainer">
                            @if (Model.Order.MinProfit < 0)
                            {
                                <span style="color:red" id="MinProfit">@Html.DisplayFor(modelItem => Model.Order.MinProfit)</span>
                            }
                            else
                            {
                                <span id="MinProfit">@Html.DisplayFor(modelItem => Model.Order.MinProfit)</span>
                            }
                        </div>
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Наценка %"))
                {
                    <td style="text-align: right;">
                        <div id="MaxDiscountContainer">
                            @if (Model.Order.MaxDiscount < 0)
                            {
                                <span style="color:red" id="MaxDiscount">@Html.DisplayFor(modelItem => Model.Order.MaxDiscount)</span>
                            }
                            else
                            {
                                <span id="MaxDiscount">@Html.DisplayFor(modelItem => Model.Order.MaxDiscount)</span>
                            }
                        </div>
                        <br />
                        <div id="MinDiscountContainer">
                            @if (Model.Order.MinDiscount < 0)
                            {
                                <span style="color:red" id="MinDiscount">@Html.DisplayFor(modelItem => Model.Order.MinDiscount)</span>
                            }
                            else
                            {
                                <span id="MinDiscount">@Html.DisplayFor(modelItem => Model.Order.MinDiscount)</span>
                            }
                        </div>
                    </td>
                }

                @if (Model.User.UserAccessId != null && Model.User.UserAccess.AvailableOrderColumns.Contains("Город доставки"))
                {
                    <td>
                        @Html.DisplayFor(modelItem => Model.Order.DeliveryCity)
                    </td>
                }
            </td>
            
            
    </tbody>
</table>
<script>
        $(document).ready(function () {
            // Получаем значения курсов валют из Razor View
            var rateUSD = @Model.RateUSD.ToString().Replace(',', '.');
            var rateEUR = @Model.RateEUR.ToString().Replace(',', '.');
            var rateBYN = @Model.RateBYN.ToString().Replace(',', '.');

            // Обработка изменения поставщика
            $('#SupplierId').on('change', function () {
                var selectedSupplier = $(this).find('option:selected');
                var currencyCode = selectedSupplier.data('currency-code');
                var costFactor = parseFloat(selectedSupplier.data('cost-factor').toString().replace(',', '.')) || 1;

                if (currencyCode) {
                    $('#CurrencyCode').text(currencyCode);
                    updatePurchasePriceInRub(currencyCode, costFactor);
                } else {
                    $('#CurrencyCode').text('');
                    $('#PurchasePriceRub').text('');
                }
            });

            // Обработка изменения значения purchase price
            $('#PurchasePrice').on('input', function () {
                var selectedSupplier = $('#SupplierId').find('option:selected');
                var currencyCode = selectedSupplier.data('currency-code');
                var costFactor = parseFloat(selectedSupplier.data('cost-factor').toString().replace(',', '.')) || 1;

                updatePurchasePriceInRub(currencyCode, costFactor);
                updateCalculations();
            });

            function updatePurchasePriceInRub(currencyCode, costFactor) {
                var purchasePrice = parseFloat($('#PurchasePrice').val());
                var purchasePriceInRub = 0;
                var titleText = '';

                switch (currencyCode) {
                    case 'USD':
                        purchasePriceInRub = purchasePrice * costFactor * rateUSD;
                        titleText = `${purchasePrice} (Цена закупки USD) * ${costFactor} (Коэффициент) * ${rateUSD} (Курс USD) = ${purchasePriceInRub.toFixed(2)}`;
                        console.log(titleText);
                        break;
                    case 'EUR':
                        purchasePriceInRub = purchasePrice * costFactor * rateEUR;
                        titleText = `${purchasePrice} (Цена закупки EUR) * ${costFactor} (Коэффициент) * ${rateEUR} (Курс EUR) = ${purchasePriceInRub.toFixed(2)}`;
                        console.log(titleText);
                        break;
                    case 'BYN':
                        purchasePriceInRub = purchasePrice * costFactor * rateBYN;
                        titleText = `${purchasePrice} (Цена закупки BYN) * ${costFactor} (Коэффициент) * ${rateBYN} (Курс BYN) = ${purchasePriceInRub.toFixed(2)}`;
                        console.log(titleText);
                        break;
                    default:
                        purchasePriceInRub = purchasePrice * costFactor;
                        titleText = `${purchasePrice} (Цена закупки RUB) * ${costFactor} (Коэффициент) = ${purchasePriceInRub.toFixed(2)}`;
                        console.log(titleText);
                        break;
                }

                $('#PurchasePriceRub').text(!isNaN(purchasePriceInRub) ? purchasePriceInRub.toFixed(2) + ' RUB' : '');
                $('#PurchasePriceRub').attr('title', titleText);
                $('#PurchasePrice').data('purchase-price-rub', purchasePriceInRub);
            }

            function updateCalculations() {
                var value = parseFloat($('#PurchasePrice').data('purchase-price-rub'));
                var price = parseFloat($('#Price').text());
                var minOzonCommission = parseFloat($('#MinOzonCommission').text());
                var maxOzonCommission = parseFloat($('#MaxOzonCommission').text());

                console.log(`Value: ${value}, Price: ${price}, Min Ozon Commission: ${minOzonCommission}, Max Ozon Commission: ${maxOzonCommission}`);

                var startCommission = price - value;
                var minProfit = startCommission - maxOzonCommission;
                var maxProfit = startCommission - minOzonCommission;
                var minDiscount = (minProfit / value) * 100;
                var maxDiscount = (maxProfit / value) * 100;

                console.log(`Start Commission: ${startCommission}, Min Profit: ${minProfit}, Max Profit: ${maxProfit}, Min Discount: ${minDiscount}, Max Discount: ${maxDiscount}`);

                var minProfitElement = $('#MinProfit');
                var maxProfitElement = $('#MaxProfit');
                var maxDiscountElement = $('#MaxDiscount');
                var minDiscountElement = $('#MinDiscount');

                minProfitElement.text(!isNaN(minProfit) ? minProfit.toFixed(2) : "");
                maxProfitElement.text(!isNaN(maxProfit) ? maxProfit.toFixed(2) : "");
                maxDiscountElement.text(!isNaN(maxDiscount) ? maxDiscount.toFixed(2) : "");
                minDiscountElement.text(!isNaN(minDiscount) ? minDiscount.toFixed(2) : "");

                minProfitElement.css('color', minProfit < 0 ? 'red' : '');
                maxProfitElement.css('color', maxProfit < 0 ? 'red' : '');
                minDiscountElement.css('color', minDiscount < 0 ? 'red' : '');
                maxDiscountElement.css('color', maxDiscount < 0 ? 'red' : '');
            }
        });
</script>




    <div class="form-group">
        <label asp-for="Order.Comment" class="control-label"></label>
        <input type="hidden" name="page" value="@Model.RedirectPage" />
        <div class="input-group">
            <input asp-for="Order.Comment" class="form-control" />
            <span class="input-group-btn">
                <input type="submit" value="Сохранить" class="btn btn-primary" style="margin-left: 10px;" />
            </span>
        </div>
        <span asp-validation-for="Order.Comment" class="text-danger"></span>
    </div>

</form>
<br />
<button id="showHistoryButton" type="button" class="btn btn-primary" onclick="getHistory(@Model.Order.Id)">Показать историю</button>
<div class="modal-body">
    
    <div id="historyContent"></div>
</div>

<div>
    <a asp-action="Index">К списку заказов</a>
</div>

<script>
    function getHistory(orderId) {
        // Отправка запроса на сервер для получения истории заказа
        $.ajax({
            url: '/Orders/GetHistory/' + orderId,
            type: 'GET',
            success: function (data) {

                var orderHistory = data.result;
                // Заполнение таблицы модального окна полученной информацией
                var historyContent = '<table class="table table-striped"><thead><tr><th>Номер заказа</th><th>Клиент</th><th>Принят в обработку</th><th>Дата отгрузки</th><th>Статус клиента</th><th>Статус</th><th>Наименование товара</th><th>Артикул</th><th>Производитель</th><th>Склад отгрузки</th><th>Поставщик</th><th>Цена сайта</th><th>Цена</th><th>Кол.</th><th>Сумма отправления</th><th>Категория</th><th>Объемный вес</th><th>Цена закупки</th><th>Комиссия ОЗОН</th><th>Прибыль</th><th>Наценка %</th><th>Город доставки</th></tr></thead><tbody>';
                for (var i = 0; i < orderHistory.length; i++) {
                    var order = orderHistory[i].order;

                    console.log(order)
                    // Получаем даты создания и изменения
                    var createdDate = new Date(orderHistory[i].start).toLocaleString();

                    var modifiedDate = new Date(orderHistory[i].end).toLocaleString();

                    var rowClass = order.isAccepted ? "table-success" : "table-active";

                    // Добавляем даты создания и изменения на всю ширину строки
                    historyContent += '<tr class="' + rowClass + '">'
                    if (i == 0) {
                        historyContent += '<td colspan="22">' + '<b>Новый</b>' + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Создан:</b>' + createdDate + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Запись была изменена пользователем:</b>' + order.updatedBy + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="/Orders/ConfirmAccepted/' + order.id + '"class="btn btn-success" onclick="hideInfo()">Принять изменение</a> </td>';
                    }
                    else {
                        historyContent += '<td colspan="22">' + '<b>Создан:</b>' + createdDate + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Изменен:</b>' + modifiedDate + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Запись была изменена пользователем: </b>' + order.updatedBy + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                        historyContent += '<button class="btn btn-primary" onclick="recoverOrder(' + order.id + ', \'' + orderHistory[i].start + '\', \'' + orderHistory[i].end + '\')">Восстановить</button></td>';
                    }
                    historyContent += '<tr class="' + rowClass + '">';
                    // Добавляем информацию о заказе
                    historyContent += '<tr>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ShipmentNumber ")) ? "bg-warning" : "") + '">' + (order.shipmentNumber != null ? order.shipmentNumber : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("OzonClient")) ? "bg-warning" : "") + '">' + (order.ozonClient != null ? order.ozonClient.name : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ProcessingDate")) ? "bg-warning" : "") + '">' + (order.processingDate != null ? new Date(order.processingDate).toLocaleString() : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ShippingDate")) ? "bg-warning" : "") + '">' + (order.shippingDate != null ? new Date(order.shippingDate).toLocaleString() : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("Status")) ? "bg-warning" : "") + '">' + (order.status != null ? order.status : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("AppStatusId")) ? "bg-warning" : "") + '">' + (order.appStatus != null ? order.appStatus.name : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ProductName")) ? "bg-warning" : "") + '">' + (order.productName != null ? order.productName : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("Article")) ? "bg-warning" : "") + '">' + (order.article != null ? order.article : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("Article")) ? "bg-warning" : "") + '">' + (order.manufacturer.name != null ? order.manufacturer.name : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ShipmentWarehouseId")) ? "bg-warning" : "") + '">' + (order.shipmentWarehouse != null ? order.shipmentWarehouse.name : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("SupplierId")) ? "bg-warning" : "") + '">' + (order.supplier != null ? order.supplier.name : '') + '</td>';
                    historyContent += '<td style="text-align: right;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ProductInfoId")) ? "bg-warning" : "") + '">' + (order.productInfo != null ? order.productInfo.currentPriceWithDiscount : '') + '</td>';
                    historyContent += '<td style="text-align: right;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("Price")) ? "bg-warning" : "") + '">' + (order.price != null ? order.price : '') + '</td>';
                    historyContent += '<td style="text-align: center;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("Quantity")) ? "bg-warning" : "") + '">' + (order.quantity != null ? order.quantity : '') + '</td>';
                    historyContent += '<td style="text-align: right;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ShipmentAmount")) ? "bg-warning" : "") + '">' + (order.shipmentAmount != null ? order.shipmentAmount : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ProductInfoId")) ? "bg-warning" : "") + '">' + (order.productInfo != null ? order.productInfo.commercialCategory : '') + '</td>';
                    historyContent += '<td style="text-align: center;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("ProductInfoId")) ? "bg-warning" : "") + '">' + (order.productInfo != null ? order.productInfo.volumetricWeight : '') + '</td>';
                    historyContent += '<td style="text-align: right;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("PurchasePrice")) ? "bg-warning" : "") + '">' + '<p style="white-space: nowrap;">' + (order.originalPurchasePrice != null ? order.originalPurchasePrice + " " + getCurrencyCode(order.supplier.currencyCode) : '') + '</p>' + (order.purchasePrice != null ? order.purchasePrice : '') + '</td > ';
                    historyContent += '<td style="text-align: right;" class="' + ((order.updatedColumns != null && (order.updatedColumns.includes("MinOzonCommission") || order.updatedColumns.includes("MaxOzonCommission"))) ? "bg-warning" : "") + '">' + (order.minOzonCommission != null ? order.minOzonCommission : '') + '<br>' + (order.maxOzonCommission != null ? order.maxOzonCommission : '') + '</td>';
                    historyContent += '<td style="text-align: right;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("MinProfit")) ? "bg-warning" : "") + '">' + (order.maxProfit != null ? order.maxProfit + "<br/>" + order.minProfit : '') + '</td>';
                    historyContent += '<td style="text-align: right;" class="' + ((order.updatedColumns != null && order.updatedColumns.includes("MinDiscount")) ? "bg-warning" : "") + '">' + (order.maxDiscount != null ? order.maxDiscount + "<br/>" + order.minDiscount : '') + '</td>';
                    historyContent += '<td class="' + ((order.updatedColumns != null && order.updatedColumns.includes("DeliveryCity")) ? "bg-warning" : "") + '">' + (order.deliveryCity != null ? order.deliveryCity : '') + '</td>';
                    historyContent += '</tr>';



                }
                historyContent += '</tbody></table>';
                // Вставка таблицы в модальное окно
                $('#historyContent').html(historyContent);
                // Отображение модального окна
                $('#historyModal').modal('show');
            },
            error: function () {
                console.error('Ошибка при получении истории заказа');
            }
        });
    }
    function getCurrencyCode(currencyCode) {
        switch (currencyCode) {
            case 0:
                return 'Нет';
            case 1:
                return 'USD';
            case 2:
                return 'EUR';
            case 3:
                return 'RUB';
            default:
                return '';
        }
    }

</script>

